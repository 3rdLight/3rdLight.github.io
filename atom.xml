<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>小朱Blog</title>
  
  <subtitle>个人技术博客</subtitle>
  <link href="http://zhubingguang.com/atom.xml" rel="self"/>
  
  <link href="http://zhubingguang.com/"/>
  <updated>2022-03-20T16:06:47.461Z</updated>
  <id>http://zhubingguang.com/</id>
  
  <author>
    <name>Zhu Bingguang</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>cpp vector容器浅析</title>
    <link href="http://zhubingguang.com/2022/03/20/cpp-vector%E5%AE%B9%E5%99%A8/"/>
    <id>http://zhubingguang.com/2022/03/20/cpp-vector%E5%AE%B9%E5%99%A8/</id>
    <published>2022-03-20T15:40:46.000Z</published>
    <updated>2022-03-20T16:06:47.461Z</updated>
    
    <content type="html"><![CDATA[<h3 id="什么是vector："><a href="#什么是vector：" class="headerlink" title="什么是vector："></a>什么是vector：</h3><p>Vector是一个封装了动态大小数组的顺序容器（Sequence Container）。跟任意其它类型容器一样，它能够存放各种类型的对象。可以简单的认为，Vector是一个能够存放任意类型的动态数组。</p><span id="more"></span><hr><h3 id="容器特性："><a href="#容器特性：" class="headerlink" title="容器特性："></a>容器特性：</h3><h4 id="顺序序列"><a href="#顺序序列" class="headerlink" title="顺序序列"></a>顺序序列</h4><p>顺序容器中的元素按照严格的线性顺序排序。可以通过元素在序列中的位置访问对应的元素。</p><h4 id="动态数组"><a href="#动态数组" class="headerlink" title="动态数组"></a>动态数组</h4><p>支持对序列中的任意元素进行快速直接访问，甚至可以通过指针算述进行该操作。提供了在序列末尾相对快速地添加&#x2F;删除元素的操作。</p><h4 id="能够感知内存分配器的（Allocator-aware）"><a href="#能够感知内存分配器的（Allocator-aware）" class="headerlink" title="能够感知内存分配器的（Allocator-aware）"></a>能够感知内存分配器的（Allocator-aware）</h4><p>容器使用一个内存分配器对象来动态地处理它的存储需求。</p><hr><h3 id="基本函数实现："><a href="#基本函数实现：" class="headerlink" title="基本函数实现："></a>基本函数实现：</h3><p>vector():创建一个空vector</p><p>vector(int nSize):创建一个vector,元素个数为nSize</p><p>vector(int nSize,const t&amp; t):创建一个vector，元素个数为nSize,且值均为t</p><p>vector(const vector&amp;):复制构造函数</p><p>vector(begin,end):复制[begin,end)区间内另一个数组的元素到vector中</p><hr><h3 id="基本用法："><a href="#基本用法：" class="headerlink" title="基本用法："></a>基本用法：</h3><p>Vector&lt;类型&gt;标识符</p><p>Vector&lt;类型&gt;标识符(最大容量)</p><p>Vector&lt;类型&gt;标识符(最大容量,初始所有值)</p><p>Int i[5]&#x3D;{1,2,3,4,5}<br>Vector&lt;类型&gt;vi(I,i+2);&#x2F;&#x2F;得到i索引值为3以后的值</p><p>Vector&lt; vector&lt; int&gt; &gt;v; 二维向量&#x2F;&#x2F;<strong>注意这里最外的&lt;&gt;要有空格。否则在比较旧的编译器下无法通过</strong></p><hr>]]></content>
    
    
    <summary type="html">&lt;h3 id=&quot;什么是vector：&quot;&gt;&lt;a href=&quot;#什么是vector：&quot; class=&quot;headerlink&quot; title=&quot;什么是vector：&quot;&gt;&lt;/a&gt;什么是vector：&lt;/h3&gt;&lt;p&gt;Vector是一个封装了动态大小数组的顺序容器（Sequence Container）。跟任意其它类型容器一样，它能够存放各种类型的对象。可以简单的认为，Vector是一个能够存放任意类型的动态数组。&lt;/p&gt;</summary>
    
    
    
    <category term="技术栈" scheme="http://zhubingguang.com/categories/%E6%8A%80%E6%9C%AF%E6%A0%88/"/>
    
    
    <category term="c++" scheme="http://zhubingguang.com/tags/c/"/>
    
    <category term="vector" scheme="http://zhubingguang.com/tags/vector/"/>
    
    <category term="STL" scheme="http://zhubingguang.com/tags/STL/"/>
    
  </entry>
  
  <entry>
    <title>写在前面</title>
    <link href="http://zhubingguang.com/2022/03/19/%E5%86%99%E5%9C%A8%E5%89%8D%E9%9D%A2/"/>
    <id>http://zhubingguang.com/2022/03/19/%E5%86%99%E5%9C%A8%E5%89%8D%E9%9D%A2/</id>
    <published>2022-03-19T07:22:00.000Z</published>
    <updated>2022-03-21T02:37:01.375Z</updated>
    
    <content type="html"><![CDATA[<p>写在前面的话，其实是最难写的。让我这样一本正经的写开篇的文章，着实难受。</p><span id="more"></span><p>被隔离了。</p><p>3月13办理入住，告知3月16解除，16当天又通知我要继续隔离到3月27，万幸酒店环境设施还不错。</p><p>在情况不明朗的时候，人总是会迫切的想做点什么。</p><p>那就做个Blog吧。</p><p>从有这个念头到完成这个Blog，花了大概两天时间，期间问了一些朋友，自己也查了一些资料。</p><p>建立此Blog的初衷仅仅是记录一些技术上的东西，偶尔发发自己的生活日常。</p><p>此Blog使用了Node.js Git Hexo等技术，算是半成品加工，项目部署在GitHub。如果用React Koa Egg这一套效果应该会好一些，但我实在不会前端的技术栈，暂时也抽不出时间仔细学。</p><p>隔离的日子，非常简单，我很难真正记住每一天，只要静下心来学习，做一些事情，其实过得也挺快的，并没有多难熬。</p><p>最后，但愿我能做到将此博客持续更新。</p><p>道阻且长，行则将至。</p><p>于重庆Steigenberger酒店</p><p><img src="/2022/03/19/%E5%86%99%E5%9C%A8%E5%89%8D%E9%9D%A2/Blog\source_posts\写在前面\123.jpg" alt="1"></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;写在前面的话，其实是最难写的。让我这样一本正经的写开篇的文章，着实难受。&lt;/p&gt;</summary>
    
    
    
    <category term="生活" scheme="http://zhubingguang.com/categories/%E7%94%9F%E6%B4%BB/"/>
    
    
  </entry>
  
</feed>
